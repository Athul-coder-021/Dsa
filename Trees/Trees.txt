--------------------------------- IMP POINTS TO NOTE ----------------------------------------------------

1. Base case ko leaf node lene ki koshish kro (eg : Max Depth in BT question)

2. << Path related >>  problem in BT follow a fixed pattern :
        (a) Leaf Node -> Base case
        (b) root->left then root->right then analyse root
        (c) most of the time carry a variable (which might contain the final result required)
        (d) solve from leaf to root approach

3. Sab kuch BFS DFS ka combo hai
   ise lagao aur fir socho
---------------------------------------------------------------------------------------------------------

--------------------------------- LEVEL ORDER TRAVERSAL CODE --------------------------------------------

vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        queue<TreeNode*>q;
        if(!root) return res;
        q.push(root);

        while(!q.empty()){
            vector<int>v;
            int s=q.size();
            for(int i=0;i<s;i++){
            TreeNode* temp=q.front(); q.pop();
            v.push_back(temp->val);
            if(temp->left)q.push(temp->left);
            if(temp->right) q.push(temp->right);    
            }
            res.push_back(v);
            
            
            }



        return res;
    }

---------------------------------------------------------------------------------------------------------

--------------------------------- ZIG-ZAG LEVEL ORDER TRAVERSAL -----------------------------------------

vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>ans;

        if(root == NULL)
        {
            return ans;
        }

        queue<TreeNode*>q;
        q.push(root);
        bool flag = true;
        while(!q.empty())
        {
            int size = q.size();
            vector<int>level(size);

            for(int i =0;i<size;i++)
            {
                TreeNode* node = q.front();
                q.pop();
                int index = flag ? i : (size - 1 - i);
                level[index] = node->val;
                if(node->left != NULL)q.push(node->left);
                if(node->right!=NULL)q.push(node->right);
            }
            ans.push_back(level);
            flag = !(flag);
        }
        return ans;
    }

---------------------------------------------------------------------------------------------------------


--------------------------- Lowest Common Ancestor Concept ----------------------------------------------

Intuition:

The very first thing we can observe from the question is that we can find the LCA of 2 given nodes from 

        i) Left subtree or in

       ii)Right subtree, if not in both the subtrees then root will be the  LCA.

Approach:

If root is null or if root is x or if root is y then return root
Made a recursion call for both
i) Left subtree 

ii)Right subtree

Because we would find LCA in the left or right subtree only.

If the left subtree recursive call gives a null value that means we haven’t found LCA in the left subtree, 
which means we found LCA on the right subtree. So we will return right.
If the right subtree recursive call gives null value, that means we haven’t found LCA on the right subtree, 
which means we found LCA on the left subtree. So we will return left .
If both left & right calls give values (not null)  that means the root is the LCA.


code :
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //base case
        if (root == NULL || root == p || root == q) {
            return root;
        }
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);

        //result
        if(left == NULL) {
            return right;
        }
        else if(right == NULL) {
            return left;
        }
        else { //both left and right are not null, we found our result
            return root;
        }
    }

explanation link : https://takeuforward.org/data-structure/lowest-common-ancestor-for-two-given-nodes/
-----------------------------------------------------------------------------------------------------------

-------------------------- RADIALLY MOVING OUT CONCEPT (DOING BOTH BFS AND DFS)----------------------------------------------------
// All Nodes Distance K in Binary Tree

// Given the root of a binary tree, the value of a target node target, and an integer k, 
// return an array of the values of all nodes that have a distance k from the target node.

// You can return the answer in any order.

#include <iostream>
#include <unordered_map>
#include <vector>
#include <queue>

using namespace std;

// Maximum Width of Binary Tree


// TreeNode structure
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};


// point 1 mark parents
// point 2 move radially outward by 1 step each time and add to queue and visited ds
class Solution {
    void markParents(TreeNode*root,unordered_map<TreeNode*,TreeNode*>&parent_track,TreeNode* target)
    {
        //same as level order traversal here just before pushing to queue we are pushing parent to map
        queue<TreeNode*>queue;
        queue.push(root);
        while(!queue.empty())
        {
            TreeNode* current = queue.front();
            queue.pop();
            if(current->left)
            {
                parent_track[current->left] = current;
                queue.push(current->left);
            }
            if(current->right)
            {
                parent_track[current->right]=current;
                queue.push(current->right);
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*>parent_track;//node->parent
        markParents(root,parent_track,target);

        unordered_map<TreeNode*,bool>visited;
        queue<TreeNode*>queue;
        queue.push(target);
        visited[target] = true;

        int curr_level =0;
        while(!queue.empty())
        {
            int size = queue.size();
            if(curr_level++ == k)
            {
                break;
            }

            for(int i =0;i<size;i++)//Take all together from queue
            {
                TreeNode* current = queue.front();
                queue.pop();
                //radially expand 1 unit
                if(current->left && !visited[current->left])
                {
                    queue.push(current->left);
                    visited[current->left]=true;
                }
                if(current->right && !visited[current->right])
                {
                    queue.push(current->right);
                    visited[current->right]=true;
                }
                if(parent_track[current] && !visited[parent_track[current]])
                {
                    queue.push(parent_track[current]);
                    visited[parent_track[current]]=true;
                }
            }
        }
        vector<int>result;
        while(!queue.empty())
        {
            TreeNode* current = queue.front();
            queue.pop();
            result.push_back(current->val);
        }
         return result;
    }
};

------------------------------------------------------------------------------------------------------------------

-------------------------------- Constructing Unique Binary Tree -------------------------------------------------

// Inorder + Preorder (Yes)
// Inorder + Postorder (Yes)
// Preorder + Postorder (No)

// Inorder is must

------------------------------------------------------------------------------------------------------------------

------------------------------- Morris Inorder Traversal Code ---------------------------------------------------
//left root right
vector<int> getInorder(TreeNode*root)
{
    vector<int>inorder;
    TreeNode*curr = root;
    while(curr!=NULL)
    {
        if(curr->left==NULL)
        {
            inorder.push_back(curr);
            curr = curr->right;
        }
        else
        {
            //left jakar fir right last node pe jao aur curr se connect kro
            TreeNode*prev= curr->left;
            while(prev->right && prev->right !=curr)
            {
                prev = prev->right;
            }

            if(prev->right == NULL)
            {
                prev->right = curr;
                curr = curr->left;
            }
            else
            {
                prev->right ==NULL;
                inorder.push_back(curr->val);
                curr = curr->right;
            }
        }
    }
}

------------------------------------------------------------------------------------------------------------------