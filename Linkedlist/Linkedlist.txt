--- CREATION OF LINKED LIST -------

class Node{
    Public: // access modifier
    int data; // the data value
    Node* next; // the pointer to the next value
    Public:
    // constructor
    Node (int data1, Node* next1){
        data=data1;  // Initialize data with the provided value
        next=next1;  // Initialize next with the provided
    }
    Node (int data1){
        data=data1;  // Initialize data with the provided value
        next=nullptr;  // Initialize next as null since it's the end of the list

    }
};
int main(){
    vector<int> arr={2,5,8,7};
    Node* y= new Node(arr[0]);
    cout<<y<<'\n'; // returns the memory value
    cout<<y->data<<'\n'; // returns the data stored at that memory point
}

--------------------------------------

--- CREATING THE START NODE ----

Node* head = new Node(arr[0]);
Node* current = head;

-- CREATING NEW LL FROM ARRAY --

for (int i = 1; i < arr.size(); i++) {
    current->next = new Node(arr[i]);
    current = current->next;
}

--------------------------------

-------- Linked List Cycle------

fastNode = 2 steps start from head
slowNode = 1 step start from head

if both meet then cycle is present

--------------------------------